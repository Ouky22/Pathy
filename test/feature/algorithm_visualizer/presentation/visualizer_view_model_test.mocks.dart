// Mocks generated by Mockito 5.4.4 from annotations
// in pathy/test/feature/algorithm_visualizer/presentation/visualizer_view_model_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:pathy/feature/pathfinding_visualizer/domain/model/algorithm_speed_level.dart'
    as _i6;
import 'package:pathy/feature/pathfinding_visualizer/domain/model/node.dart'
    as _i2;
import 'package:pathy/feature/pathfinding_visualizer/domain/model/node_state.dart'
    as _i7;
import 'package:pathy/feature/pathfinding_visualizer/domain/model/node_state_change.dart'
    as _i5;
import 'package:pathy/feature/pathfinding_visualizer/domain/model/path_finding_algorithm_selection.dart'
    as _i8;
import 'package:pathy/feature/pathfinding_visualizer/domain/pathfinding_executor_service.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeNode_0 extends _i1.SmartFake implements _i2.Node {
  _FakeNode_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [PathFindingExecutorService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPathFindingExecutorService extends _i1.Mock
    implements _i3.PathFindingExecutorService {
  @override
  int get minRows => (super.noSuchMethod(
        Invocation.getter(#minRows),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  int get minColumns => (super.noSuchMethod(
        Invocation.getter(#minColumns),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  _i2.Node get startNode => (super.noSuchMethod(
        Invocation.getter(#startNode),
        returnValue: _FakeNode_0(
          this,
          Invocation.getter(#startNode),
        ),
        returnValueForMissingStub: _FakeNode_0(
          this,
          Invocation.getter(#startNode),
        ),
      ) as _i2.Node);

  @override
  set startNode(_i2.Node? _startNode) => super.noSuchMethod(
        Invocation.setter(
          #startNode,
          _startNode,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.Node get targetNode => (super.noSuchMethod(
        Invocation.getter(#targetNode),
        returnValue: _FakeNode_0(
          this,
          Invocation.getter(#targetNode),
        ),
        returnValueForMissingStub: _FakeNode_0(
          this,
          Invocation.getter(#targetNode),
        ),
      ) as _i2.Node);

  @override
  set targetNode(_i2.Node? _targetNode) => super.noSuchMethod(
        Invocation.setter(
          #targetNode,
          _targetNode,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Stream<List<_i5.NodeStateChange>> get nodeStateChangeStream =>
      (super.noSuchMethod(
        Invocation.getter(#nodeStateChangeStream),
        returnValue: _i4.Stream<List<_i5.NodeStateChange>>.empty(),
        returnValueForMissingStub:
            _i4.Stream<List<_i5.NodeStateChange>>.empty(),
      ) as _i4.Stream<List<_i5.NodeStateChange>>);

  @override
  _i4.Stream<void> get pathFindingFinishedEventStream => (super.noSuchMethod(
        Invocation.getter(#pathFindingFinishedEventStream),
        returnValue: _i4.Stream<void>.empty(),
        returnValueForMissingStub: _i4.Stream<void>.empty(),
      ) as _i4.Stream<void>);

  @override
  int get rows => (super.noSuchMethod(
        Invocation.getter(#rows),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  int get columns => (super.noSuchMethod(
        Invocation.getter(#columns),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  _i6.AlgorithmSpeedLevel get algorithmAnimationSpeed => (super.noSuchMethod(
        Invocation.getter(#algorithmAnimationSpeed),
        returnValue: _i6.AlgorithmSpeedLevel.turbo,
        returnValueForMissingStub: _i6.AlgorithmSpeedLevel.turbo,
      ) as _i6.AlgorithmSpeedLevel);

  @override
  List<List<_i7.NodeState>> get nodeStateGrid => (super.noSuchMethod(
        Invocation.getter(#nodeStateGrid),
        returnValue: <List<_i7.NodeState>>[],
        returnValueForMissingStub: <List<_i7.NodeState>>[],
      ) as List<List<_i7.NodeState>>);

  @override
  void startNewPathFinding(
          _i8.PathFindingAlgorithmSelection? selectedAlgorithm) =>
      super.noSuchMethod(
        Invocation.method(
          #startNewPathFinding,
          [selectedAlgorithm],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void pausePathFinding() => super.noSuchMethod(
        Invocation.method(
          #pausePathFinding,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void resumePathFinding() => super.noSuchMethod(
        Invocation.method(
          #resumePathFinding,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void stopPathFinding() => super.noSuchMethod(
        Invocation.method(
          #stopPathFinding,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void changeAlgorithmAnimationSpeed(_i6.AlgorithmSpeedLevel? speedLevel) =>
      super.noSuchMethod(
        Invocation.method(
          #changeAlgorithmAnimationSpeed,
          [speedLevel],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void toggleWall(
    int? row,
    int? column,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #toggleWall,
          [
            row,
            column,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void selectTargetNode(
    int? row,
    int? column,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #selectTargetNode,
          [
            row,
            column,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void selectStartNode(
    int? row,
    int? column,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #selectStartNode,
          [
            row,
            column,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void resetGrid() => super.noSuchMethod(
        Invocation.method(
          #resetGrid,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void moveStartAndTargetToStartPosition() => super.noSuchMethod(
        Invocation.method(
          #moveStartAndTargetToStartPosition,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void clearVisitedAndPathNodes() => super.noSuchMethod(
        Invocation.method(
          #clearVisitedAndPathNodes,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void resizeGrid(
    int? newRows,
    int? newColumns,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #resizeGrid,
          [
            newRows,
            newColumns,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
